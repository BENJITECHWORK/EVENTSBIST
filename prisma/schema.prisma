// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique @db.VarChar(255)
  firstName       String           @db.VarChar(255)
  lastName        String           @db.VarChar(255)
  password        String           @db.VarChar(255)
  phone_number    String           @db.VarChar(15)
  createdAt       DateTime         @default(now())
  roleId          Int
  role            Role             @relation(fields: [roleId], references: [id])
  profilePic      String?           @db.VarChar(255)
  profile         String?           @db.VarChar(255)
  location        String?
  serviceCategories ServiceCategory[]
  services        Service[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  users     User[]
}

model Service {
  id                  Int       @id @default(autoincrement())
  service_name        String    @unique @db.VarChar(255)
  service_description String    @db.VarChar(255)
  service_price       Decimal
  isBooked            Boolean   @default(false)
  client_interest     Boolean   @default(false)
  user                User      @relation(fields: [userId], references: [id])
  userId              Int       
  service_category    ServiceCategory   @relation(fields: [service_category_id], references: [service_category_id])
  service_category_id Int   
  onPromotion         Boolean   @default(false)      
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?
  promotion_price     Decimal?
  booking_date        DateTime?
}

model ServiceCategory {
  service_category_id Int  @id @default(autoincrement())
  service_category_name String @unique @db.VarChar(255)
  service_category_description String
  user                User @relation(fields: [userId], references: [id])
  userId              Int  
  services            Service[]
}

model Message {
  id        Int      @id @default(autoincrement())
  senderId  String
  recipientId String
  message   String
  timestamp DateTime @default(now())
}

model EventType {
  id          Int      @id @default(autoincrement())
  event_type        String   @unique @db.VarChar(255)
  description String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

