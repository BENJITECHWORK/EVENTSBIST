// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int              @id @default(autoincrement())
  email             String           @unique @db.VarChar(255)
  firstName         String           @db.VarChar(255)
  lastName          String           @db.VarChar(255)
  password          String           @db.VarChar(255)
  phone_number      String           @db.VarChar(15)
  createdAt         DateTime         @default(now())
  roleId            Int
  role              Role             @relation(fields: [roleId], references: [id])
  profilePic        String?          @db.VarChar(255)
  profile           String?          @db.VarChar(255)
  location          String?
  serviceCategories ServiceCategory[]
  services          Service[]
  providedServices  Booking[]        @relation(name: "ServiceProvider")
  organizedEvents   Booking[]        @relation(name: "Organizer")
}

model Role {
  id        Int    @id @default(autoincrement())
  name      String @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  users     User[]
}

model Service {
  id                   Int            @id @default(autoincrement())
  service_name         String         @unique @db.VarChar(255)
  service_description  String         @db.VarChar(255)
  service_price        Decimal
  isBooked             Boolean        @default(false)
  client_interest      Boolean        @default(false)
  user                 User           @relation(fields: [userId], references: [id])
  userId               Int
  service_category     ServiceCategory @relation(fields: [service_category_id], references: [service_category_id])
  service_category_id  Int
  onPromotion          Boolean        @default(false)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  deletedAt            DateTime?
  bookings             Booking[]
}

model ServiceCategory {
  service_category_id   Int      @id @default(autoincrement())
  service_category_name String   @unique @db.VarChar(255)
  service_category_description String
  user                   User    @relation(fields: [userId], references: [id])
  userId                 Int
  services               Service[]
}

model Message {
  id           Int      @id @default(autoincrement())
  senderId     String
  recipientId  String
  message      String
  timestamp    DateTime @default(now())
}

model EventType {
  id           Int      @id @default(autoincrement())
  event_type   String   @unique @db.VarChar(255)
  description  String   @db.VarChar(255)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  bookings     Booking[]
}

model Booking {
  id                  Int       @id @default(autoincrement())
  event_date          DateTime
  event_name          String    @db.VarChar(255)
  location            String    @db.VarChar(255)
  event_organizer_id  Int       
  service_provider_id Int
  event_type_id       Int
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  EventType           EventType @relation(fields: [event_type_id], references: [id])
  ServiceProvider     User      @relation(name: "ServiceProvider", fields: [service_provider_id], references: [id])
  Organizer           User      @relation(name: "Organizer", fields: [event_organizer_id], references: [id])
  Service             Service   @relation(fields: [service_id], references: [id])
  service_id          Int
}
